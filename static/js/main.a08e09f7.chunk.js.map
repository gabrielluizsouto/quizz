{"version":3,"sources":["api.ts","components/QuestionCard.tsx","utils.ts","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","QuestionCard","question","answers","callback","userAnswer","questionNumber","totalQuestions","console","log","className","dangerouslySetInnerHTML","__html","map","answer","disabled","value","onClick","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","then","response","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","correct","prev","answerObject","correctAnswer","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a08e09f7.chunk.js","sourcesContent":["import { shuffleArray } from \"./utils\";\n\nexport type Question = {\n    category: string;\n    correct_answer: string;\n    difficult: string;\n    incorrect_answers: string[];\n    question: string;\n    type: string;\n}\n\nexport type QuestionState = Question & { answers: string[]}\n\nexport enum Difficulty {\n    EASY = \"easy\",\n    MEDIUM = \"medium\",\n    HARD = \"hard\",\n}\n\nexport const fetchQuizQuestions = async (\n    amount: number, \n    difficulty: Difficulty,\n) => {\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n    const data = await fetch(endpoint)\n                        .then((response)=>response.json());\n    return data.results.map((question: Question) => {\n        return {\n            ...question,\n            answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\n        }\n    });\n}\n\nexport default fetchQuizQuestions;","import React from 'react';\nimport { AnswerObject } from '../App'\n\ntype Props = {\n    question: string;\n    answers: string[];\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    userAnswer: AnswerObject | undefined;\n    questionNumber: number;\n    totalQuestions: number;\n}\n\nconst QuestionCard: React.FC<Props> = ({\n    question,\n    answers,\n    callback,\n    userAnswer,\n    questionNumber,\n    totalQuestions\n}) => (\n    <div>{console.log(question)}\n        <p className=\"number\">\n            Question: {questionNumber} / {totalQuestions}; \n        </p>\n        <p dangerouslySetInnerHTML={{ __html: question }}></p>\n        <div>\n            {answers.map(answer => (\n                <div key={answer}>\n                    <button disabled={userAnswer ? true : false} value={answer} onClick={callback}>\n                        <span dangerouslySetInnerHTML={{ __html: answer}}></span>\n                    </button>\n                </div>\n            ))}\n        </div>\n    </div>\n)\n\nexport default QuestionCard;","export const shuffleArray = (array: any[]) => {\n    return [...array].sort(() => Math.random() - 0.5);\n}","import styled, { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle =  createGlobalStyle`\n    p {}\n`","import React, { useState } from 'react';\nimport QuestionCard from './components/QuestionCard';\nimport { fetchQuizQuestions, Difficulty, QuestionState } from './api';\nimport { GlobalStyle } from './App.styles';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  \n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  }\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      //users answer\n      const answer = e.currentTarget.value;\n      //check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      //add ascore if answer is correct\n      if (correct) setScore(prev => prev + 1);\n      // save answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev)=> [...prev, answerObject]);\n    }\n  }\n\n  const nextQuestion = () => {\n    //move on to the next question if is not the last one\n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion)\n    }\n  }\n\n  return (\n    <>\n      <GlobalStyle />\n        <div className=\"App\">\n          <h1> Ash Quizz</h1>\n          { (gameOver || userAnswers.length === TOTAL_QUESTIONS) ? \n            <button className=\"start\" onClick={startTrivia}>Start</button>\n          : null}\n          {/* { (gameOver || userAnswers.length === TOTAL_QUESTIONS) && selectedDifficulty ? \n            ['easy', 'medium', 'hard'].map(difficulty => {\n              return <button className=\"difficulty\" value={difficulty} onClick={() => setSelectedDifficulty(difficulty)}>{difficulty && difficulty.toUpperCase}</button>\n            })\n          : null} */}\n          { !gameOver ? <p className=\"score\">Score: {score}</p> : null }\n          { loading && <p>Loading Questions...</p> }\n          { !loading && !gameOver &&\n            <QuestionCard\n              questionNumber={number+1}\n              totalQuestions={TOTAL_QUESTIONS}\n              question={questions[number].question}\n              answers={questions[number].answers}\n              userAnswer={userAnswers ? userAnswers[number] : undefined}\n              callback={checkAnswer}\n            /> }\n          { (!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS -1) ? \n            <button className=\"next\" onClick={nextQuestion}>Next Question</button>\n            : null\n          }\n        </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}