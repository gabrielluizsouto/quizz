{"version":3,"sources":["resources/api.ts","App.styles.ts","components/Button.tsx","components/QuestionCard.tsx","resources/utils.ts","components/GameStatus.tsx","components/Loading.tsx","App.tsx","index.tsx"],"names":["Difficulty","GlobalStyle","createGlobalStyle","GameStatusBox","styled","div","QuestionCardBox","QuestionCardButtons","Button","answer","callback","disabled","className","value","onClick","dangerouslySetInnerHTML","__html","QuestionCard","question","answers","userAnswer","map","correctAnswer","id","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","then","response","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","GameStatus","questionNumber","totalQuestions","score","LoadingBox","Loading","TOTAL_QUESTIONS","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","correct","prev","answerObject","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eaa7afd7.chunk.js","sourcesContent":["import { shuffleArray } from \"./utils\";\n\nexport type Question = {\n    category: string;\n    correct_answer: string;\n    difficult: string;\n    incorrect_answers: string[];\n    question: string;\n    type: string;\n}\n\nexport type QuestionState = Question & { answers: string[]}\n\nexport enum Difficulty {\n    EASY = \"easy\",\n    MEDIUM = \"medium\",\n    HARD = \"hard\",\n}\n\nexport const fetchQuizQuestions = async (\n    amount: number, \n    difficulty: Difficulty,\n) => {\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n    const data = await fetch(endpoint)\n                        .then((response)=>response.json());\n    return data.results.map((question: Question) => {\n        return {\n            ...question,\n            answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\n        }\n    });\n}\n\nexport default fetchQuizQuestions;","import styled, { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle =  createGlobalStyle`\n    body {\n        color: white;\n        background-color: #2C2E43;\n        font-family: 'Roboto', sans-serif;\n    }\n\n    \n    button {\n        margin-bottom: 8px;\n        background-color: #595260;\n        color: white;\n        width: 300px;\n        height: auto;\n        min-height: 50px;\n        border-radius: 10px;\n        box-shadow: 2px 2px 1px black;\n\n        :hover {\n            opacity: 0.8;\n        }\n    }\n\n    h1 {\n        margin-bottom: 0px;\n    }\n\n    .button-disabled {\n        opacity: 0.8;\n    }\n\n    .next {\n        background-color: gray;\n        max-width: 200px;\n    }\n\n    .App {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n    }\n`\n\nexport const GameStatusBox =  styled.div`\n    width: 100%;\n    display: inline-flex;\n    justify-content: space-around;\n    /* align-items: flex-end; */\n\n    div {\n        font-size: small;\n    }\n`\n\nexport const QuestionCardBox = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    p {\n        text-align: center;\n        margin-top: 2px;\n        margin-bottom: 10px;\n    }\n    \n    .question {\n        font-size: x-large;\n    }\n\n    .feedback {\n        margin-bottom: 5px;\n        margin-top: 0;\n    }\n\n    #feedback-error {\n        background-color: red;\n    }\n\n    #feedback-correct {\n        background-color: green;\n    }\n\n`\n\nexport const QuestionCardButtons = styled.div`\n    width: 70%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin-bottom: 1rem;\n\n    p {\n        width: 70%;\n    }\n\n`","import React from 'react';\n\ntype Props = {\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    disabled: boolean;\n    answer: string;\n}\n\nconst Button: React.FC<Props> = ({\n    answer,\n    callback,\n    disabled,\n}) => (\n    <button className={disabled ? 'button-disabled' : 'button-enabled'} disabled={disabled} value={answer} onClick={callback}>\n        <span dangerouslySetInnerHTML={{ __html: answer}}></span>\n    </button>\n)\n\nexport default Button;","import React from 'react';\nimport { AnswerObject } from '../App'\nimport { QuestionCardBox, QuestionCardButtons } from '../App.styles';\nimport Button from './Button';\n\ntype Props = {\n    question: string;\n    answers: string[];\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    userAnswer: AnswerObject | undefined;\n    questionNumber: number;\n    totalQuestions: number;\n}\n\nconst QuestionCard: React.FC<Props> = ({\n    question,\n    answers,\n    callback,\n    userAnswer,\n}) => (\n    <QuestionCardBox>\n        <p className=\"question\" dangerouslySetInnerHTML={{ __html: question}}></p>\n        <QuestionCardButtons>\n            {answers.map((answer) => (\n                <Button\n                    key={answer}\n                    answer={answer}\n                    disabled={userAnswer ? true : false}\n                    callback={callback}\n                />\n            ))}\n        </QuestionCardButtons>\n        {userAnswer?.answer ? \n            userAnswer?.correctAnswer === userAnswer?.answer ?\n            <p className=\"feedback\" id=\"feedback-correct\">Correto</p> : <p className=\"feedback error\" id=\"feedback-error\">Errado. <br/>Resposta: {userAnswer.correctAnswer}</p> \n            : null\n        }\n    </QuestionCardBox>\n)\n\nexport default QuestionCard;","export const shuffleArray = (array: any[]) => {\n    return [...array].sort(() => Math.random() - 0.5);\n}","import React from 'react';\nimport { GameStatusBox } from '../App.styles';\n\ntype Props = {\n    questionNumber: number;\n    totalQuestions: number;\n    score: number;\n}\n\nexport const GameStatus: React.FC<Props> = ({\n    questionNumber,\n    totalQuestions,\n    score\n}) => (\n    <GameStatusBox>\n        <p className=\"questions-status\">\n            Question: {questionNumber} / {totalQuestions}\n        </p>\n        <p className=\"score\">Score: {score}</p>\n    </GameStatusBox>\n)","import React from 'react';\nimport styled from \"styled-components\";\n\nconst LoadingBox = styled.div`\n    .lds-roller {\n        display: inline-block;\n        position: relative;\n        width: 80px;\n        height: 80px;\n        }\n        .lds-roller div {\n        animation: lds-roller 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\n        transform-origin: 40px 40px;\n        }\n        .lds-roller div:after {\n        content: \" \";\n        display: block;\n        position: absolute;\n        width: 7px;\n        height: 7px;\n        border-radius: 50%;\n        background: #fff;\n        margin: -4px 0 0 -4px;\n        }\n        .lds-roller div:nth-child(1) {\n        animation-delay: -0.036s;\n        }\n        .lds-roller div:nth-child(1):after {\n        top: 63px;\n        left: 63px;\n        }\n        .lds-roller div:nth-child(2) {\n        animation-delay: -0.072s;\n        }\n        .lds-roller div:nth-child(2):after {\n        top: 68px;\n        left: 56px;\n        }\n        .lds-roller div:nth-child(3) {\n        animation-delay: -0.108s;\n        }\n        .lds-roller div:nth-child(3):after {\n        top: 71px;\n        left: 48px;\n        }\n        .lds-roller div:nth-child(4) {\n        animation-delay: -0.144s;\n        }\n        .lds-roller div:nth-child(4):after {\n        top: 72px;\n        left: 40px;\n        }\n        .lds-roller div:nth-child(5) {\n        animation-delay: -0.18s;\n        }\n        .lds-roller div:nth-child(5):after {\n        top: 71px;\n        left: 32px;\n        }\n        .lds-roller div:nth-child(6) {\n        animation-delay: -0.216s;\n        }\n        .lds-roller div:nth-child(6):after {\n        top: 68px;\n        left: 24px;\n        }\n        .lds-roller div:nth-child(7) {\n        animation-delay: -0.252s;\n        }\n        .lds-roller div:nth-child(7):after {\n        top: 63px;\n        left: 17px;\n        }\n        .lds-roller div:nth-child(8) {\n        animation-delay: -0.288s;\n        }\n        .lds-roller div:nth-child(8):after {\n        top: 56px;\n        left: 12px;\n        }\n        @keyframes lds-roller {\n        0% {\n            transform: rotate(0deg);\n        }\n        100% {\n            transform: rotate(360deg);\n        }\n        }\n\n`\n\nconst Loading: React.FC<any> = () => (\n    <LoadingBox><div className=\"lds-roller\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></LoadingBox>\n)\n\nexport default Loading;","import React, { useState } from 'react';\nimport QuestionCard from './components/QuestionCard';\nimport { fetchQuizQuestions, Difficulty, QuestionState } from './resources/api';\nimport { GlobalStyle } from './App.styles';\nimport { GameStatus } from './components/GameStatus';\nimport Loading from './components/Loading';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  \n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  }\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      //users answer\n      const answer = e.currentTarget.value;\n      //check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      //add ascore if answer is correct\n      if (correct) setScore(prev => prev + 1);\n      // save answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev)=> [...prev, answerObject]);\n    }\n  }\n\n  const nextQuestion = () => {\n    //move on to the next question if is not the last one\n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion)\n    }\n  }\n\n  return (\n    <>\n      <GlobalStyle />\n        <div className=\"App\">\n          <h1> Ash Quizz</h1>\n          { (gameOver || userAnswers.length === TOTAL_QUESTIONS) ? \n            <button className=\"start\" onClick={startTrivia}>Start</button>\n          : null}\n          { loading && <Loading/> }\n          { !loading && !gameOver &&\n            <GameStatus\n              questionNumber={number+1}\n              totalQuestions={TOTAL_QUESTIONS}\n              score={score}\n            />\n          }\n          { !loading && !gameOver && \n            <QuestionCard\n              questionNumber={number+1}\n              totalQuestions={TOTAL_QUESTIONS}\n              question={questions[number].question}\n              answers={questions[number].answers}\n              userAnswer={userAnswers ? userAnswers[number] : undefined}\n              callback={checkAnswer}\n            /> }\n          { (!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS -1) ? \n            <button className=\"next\" onClick={nextQuestion}>Next Question</button>\n            : null\n          }\n        </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}